//
//
//  Generated by StarUML(tm) C++ Add-In
//
//  @ Project : PSDE
//  @ File Name : CCoVecSequence.h
//  @ Date : 2010/12/20
//  @ Author : 
//
//


#if !defined(_CCOVECSEQUENCE_H)
#define _CCOVECSEQUENCE_H

#include <vector>
#include <algorithm>
#include <iosfwd>
#include <iostream>

using namespace std;
#include <string>

#include "CCoordinate.h"
#include "CRectangle.h"
#include "maths.h"
namespace Geometry {
class CCoVecSequence {
public:
	CCoVecSequence();
	CCoVecSequence(size_t n);
	CCoVecSequence(const CCoordinate &c);
	CCoVecSequence(const CCoVecSequence & seq);
	~CCoVecSequence();
	CCoVecSequence *clone() const;
public:
	bool isEmpty() const;
	void add(const CCoordinate & pt);
	void add(const double x, const double y, const double z = DOUBLE_NAN);
	void add(const CCoVecSequence & seq);
	void pop();
	CCoordinate getAt(size_t pos) const;
	void clear();
	void removeAt(size_t pos);
	void insertAt(size_t pos, CCoordinate &c);
	void setAt(size_t pos, const CCoordinate & c);
	size_t getSize() const;
	CCoordinate first();
	CCoordinate back();
	void reverse();
	CRectangle getBoundingRect() const;
	CCoVecSequence & unique();
	CCoordinate& operator[](size_t pos) const;
public:
	static bool equal(const CCoVecSequence &a, const CCoVecSequence &b);
	static bool equal(const CCoVecSequence &a, const CCoVecSequence &b, double eps);
private:
	vector<CCoordinate>* mVect;
	bool mDirtyBoundingRect;
	CRectangle mBoundingRect;
};

std::ostream& operator<<(std::ostream& out, const CCoVecSequence& seq);
}

#endif  //_CCOVECSEQUENCE_H
