//
//
//  Generated by StarUML(tm) C++ Add-In
//
//  @ Project : PSDE
//  @ File Name : CCoordinate.cpp
//  @ Date : 2010/12/20
//  @ Author : 
//
//


#include "CCoordinate.h"
#include <cmath>
#include <string>
#include <iostream> // for << operator in ostream
using namespace std;
using namespace General;
namespace Geometry {

CCoordinate CCoordinate::nullCoord = CCoordinate(DOUBLE_NAN, DOUBLE_NAN, DOUBLE_NAN, DOUBLE_NAN);
CCoordinate::CCoordinate(double x, double y, double z, double m) :
	x(x), y(y), z(z),m(m) {

}

CCoordinate::CCoordinate(const CCoordinate & c) :
	x(c.x), y(c.y), z(c.z) ,m(c.m){

}

CCoordinate::~CCoordinate() {

}
inline bool CCoordinate::equal(const CCoordinate & c) const {
	return equal2D(c);
}
inline bool CCoordinate::equal2D(const CCoordinate & c) const {
	return c.x == x && c.y == y;
}

inline double CCoordinate::distance2D(const CCoordinate & c) {
	return std::sqrt(sqr(x - c.x) + sqr(y - c.y));
}

inline void CCoordinate::setNull() {
	x = y = z =m= DOUBLE_NAN;
}

inline bool CCoordinate::isNull() const {
	return ISNAN(x) && ISNAN(y) && ISNAN(z)&& ISNAN(m);
}

CCoordinate& CCoordinate::operator=(const CCoordinate & c) {
	x = c.x, y = c.y, z = c.z,m=c.m;
	return *this;
}
bool operator==(const CCoordinate &a, const CCoordinate &b) {
	return a.equal2D(b);
}
bool operator!=(const CCoordinate &a, const CCoordinate &b) {
	return !a.equal2D(b);
}

bool CCoordinate::equalCCoordinate(const CCoordinate &a, const CCoordinate &b, double eps) {
	return double_cmp(a.x - b.x, eps) == 0 && double_cmp(a.y - b.y, eps) == 0;
}
std::ostream& operator<<(std::ostream& out, const CCoordinate& c) {
	out << "(" << c.x <<  ", "<< c.y << ")";
	return out;
}
}
