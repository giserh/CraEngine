//
//
//  Generated by StarUML(tm) C++ Add-In
//
//  @ Project : PSDE
//  @ File Name : CGeometry.h
//  @ Date : 2010/12/20
//  @ Author : 
//
//


#if !defined(_CGEOMETRY_H)
#define _CGEOMETRY_H

#include "CCoordinate.h"
#include "CCoVecSequence.h"
#include "COpenGISInfo.h"
#include "maths.h"
#include <cstdio>
#include <vector>
#include <iosfwd>
#include <string>
using namespace std;
using namespace Core;


namespace Geometry {
class CCoordinate;
class CPoint;
}

namespace Geometry {

class CGeometry {
public:
	CGeometry();
	CGeometry(const CGeometry & geom);
	virtual ~CGeometry();
public:
	virtual CGeometry* clone() const= 0;
	virtual double getArea() const= 0;
	virtual double getLength() const= 0;
	virtual double distance(CGeometry* geom) const;

	virtual size_t getNumPoints() const= 0;
	virtual size_t getNumGeometries() const = 0;

	virtual CCoordinate getCoordinateAt(size_t pos) const;
	virtual const CGeometry* getGeometryAt(size_t pos) const;
	virtual CCoVecSequence *getCoordinates() const = 0;

	virtual CRectangle getBoundingRect() const = 0;
	virtual string getGeometryType() const= 0;
	virtual COpenGISType::OPENGIS_TYPE getOGISType() const = 0;

	virtual bool isSimple() const;
	virtual bool isEmpty() const = 0;
	virtual bool isValid() const;

	virtual bool equalExact(CGeometry* geom, double eps) const= 0;

	bool isEquivalentClass(const CGeometry *other) const;
	int getSRID() const;
	void setSRID(int newSRID);

public:
	bool HasM;
	bool HasZ;
protected:
	int mSRID;
};

class CIlligalGeomException {
public:
	CIlligalGeomException(const string &info) :
		info(info) {
	}

	void showMessage() {
		printf("ERROR %s\n", info.c_str());
	}
private:
	string info;
};

}

#endif  //_CGEOMETRY_H
